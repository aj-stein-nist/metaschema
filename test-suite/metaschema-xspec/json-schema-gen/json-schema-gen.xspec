<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
   xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
   xmlns:j="http://www.w3.org/2005/xpath-functions"
   stylesheet="../../../toolchains/xslt-M4/nist-metaschema-MAKE-JSON-SCHEMA.xsl" run-as="external">
   <x:scenario label="When generating a JSON schema from composed Metaschema definitions">
      <x:scenario label="if it has a defined flag">
         <x:scenario label="with no constraint and no allowed-values">
            <x:context href="json-value_flag_unconstrained_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it." 
               test="j:json-to-xml($x:result)//j:map[@key='test-flag']"
               select="j:json-to-xml(j:unparsed-text('../json-value_flag_unconstrained.json'))//j:map[@key='test-flag']"/>
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, strict enforcement of allow-other='no' and explicit target of '.'">
            <x:context href="json-value_flag_constrained-closed_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[@key='test-flag']"
               select="j:json-to-xml(j:unparsed-text('../json-value_flag_constrained-closed.json'))//j:map[@key='test-flag']"/> 
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, no explicit target, and permissive enforcement of allow-other='yes'">
            <x:context href="json-value_flag_constrained-open_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[@key='test-flag']"
               select="j:json-to-xml(j:unparsed-text('../json-value_flag_constrained-open.json'))//j:map[@key='test-flag']"/>
         </x:scenario>
      </x:scenario>
      <x:scenario label="if it has a defined field">
         <!--
            For allowed-value enumeration tests, the XSLT implementation's JSON schema gen prefixes the model short-name for its field definitions.
            So, for the field 'test-field' in a Metaschema module with a short-name 'json-value_field_unconstrained' the final generated element
            of the JSON schema struct is 'json-value_field_unconstrained-json-value_field_unconstrained:test-field.' This is why we do not match
            on full field name in JSON schema struct by key from fn:json-to-xml() document-node() with the JSON data in XML form, and then use
            fn: contains(@key, ':test-field') test to make tests less flaky if the module name in test data changes and just check the field name.
         -->
         <x:scenario label="with no constraint and no allowed-values">
            <x:context href="json-value_field_unconstrained_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it." 
               test="j:json-to-xml($x:result)//j:map[contains(@key, ':test-field')]"
               select="j:json-to-xml(j:unparsed-text('../json-value_field_unconstrained.json'))//j:map[contains(@key, ':test-field')]"/>
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, strict enforcement of allow-other='no' and explicit target of '.'">
            <x:context href="json-value_field_constrained-closed_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[contains(@key, ':test-field')]"
               select="j:json-to-xml(j:unparsed-text('../json-value_field_constrained-closed.json'))//j:map[contains(@key, ':test-field')]"/> 
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, no explicit target, and permissive enforcement of allow-other='yes'">
            <x:context href="json-value_field_constrained-open_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[contains(@key, ':test-field')]"
               select="j:json-to-xml(j:unparsed-text('../json-value_field_constrained-open.json'))//j:map[contains(@key, ':test-field')]"/>
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, strict enforcement of allow-other='no' and explicit target other than '.'">
            <x:context href="json-value_field_constrained-narrow_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[contains(@key, ':test-field')]"
               select="j:json-to-xml(j:unparsed-text('../json-value_field_constrained-narrow.json'))//j:map[contains(@key, ':test-field')]"/>
         </x:scenario>
         <x:scenario label="with a constraint, allowed-values, permissive enforcement of allow-other='yes' and explicit target other than '.'">
            <x:context href="json-value_field_constrained-sortof_metaschema.xml"/>
            <x:expect label="the resulting JSON Schema should not have an enum to enforce it."
               test="j:json-to-xml($x:result)//j:map[contains(@key, ':test-field')]"
               select="j:json-to-xml(j:unparsed-text('../json-value_field_constrained-sortof.json'))//j:map[contains(@key, ':test-field')]"/>
         </x:scenario>
         <x:scenario label="if has a $schema directive and does not import other Metaschema modules">
            <x:context href="schema_directive_no-imports.xml"/>
            <x:expect label="the resulting JSON Schema does not require but optionally allows the $schema declaration in document instances."
               test="j:json-to-xml($x:result)//j:map[@key='properties']/j:map[@key='$schema']" select="j:json-to-xml(j:unparsed-text('../schema_directive_no-imports.json'))//j:map[@key='properties']/j:map[@key='$schema']"/>
         </x:scenario>
         <x:scenario label="if has a $schema directive and does import other Metaschema modules">
            <x:context href="schema_directive_importing.xml"/>
            <x:expect label="the resulting JSON Schema does not require but optionally allows the $schema declaration in document instances."
               test="j:json-to-xml($x:result)//j:map[@key='properties']/j:map[@key='$schema']" select="j:json-to-xml(j:unparsed-text('../schema_directive_importing.json'))//j:map[@key='properties']/j:map[@key='$schema']"/>
         </x:scenario>
      </x:scenario>
   </x:scenario>
</x:description>
